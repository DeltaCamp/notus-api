# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AbiDto {
  id: ID
  name: String
  isPublic: Boolean
  abi: String
}

type AbiEntity {
  id: ID!
  name: String!
  abi: String!
  isPublic: Boolean!
  abiEvents: [AbiEventEntity!]!
}

input AbiEventDto {
  id: ID
  isPublic: Boolean
}

type AbiEventEntity {
  id: ID!
  name: String!
  topic: String!
  events: [EventEntity!]!
  abi: AbiEntity!
  abiId: Float!
  abiEventInputs: [AbiEventInputEntity!]!
  isPublic: Boolean!
}

input AbiEventInputDto {
  id: ID
  metaType: Float
}

type AbiEventInputEntity {
  id: ID!
  name: String!
  type: String!
  metaType: Float
  abiEvent: AbiEventEntity!
  abiEventId: Float!
}

input AppDto {
  id: ID
  name: String = ""
}

type AppEntity {
  id: ID!
  name: String!
}

input ContractDto {
  id: ID
  name: String
  address: String
  abi: AbiDto
}

type ContractEntity {
  id: ID!
  owner: UserEntity!
  ownerId: Float!
  name: String!
  abi: AbiEntity!
  abiId: Float!
  address: String!
  createdAt: Date!
  updatedAt: Date!
  deletedAt: Date
}

input ContractsQuery {
  skip: Float
  take: Float
  userId: Float
  address: String
  name: String
}

type ContractsQueryResponse {
  totalCount: Float!
  skip: Float
  take: Float
  contracts: [ContractEntity!]!
}

"""Date custom scalar type"""
scalar Date

input EventDto {
  id: ID
  app: AppDto
  title: String
  scope: Float
  runCount: Float
  abiEventId: Float
  contractId: Float
  isPublic: Boolean
  isActive: Boolean
  parentId: Float
  deletedAt: Date
  webhookUrl: String
  webhookBody: String
  color: String
  sendEmail: Boolean
  matchers: [MatcherDto!]
}

type EventEntity {
  id: ID!
  user: UserEntity!
  scope: Float!
  abiEvent: AbiEventEntity
  abiEventId: Float
  app: AppEntity
  contract: ContractEntity
  contractId: Float
  title: String!
  isPublic: Boolean!
  isActive: Boolean!
  parent: EventEntity
  parentId: Float
  matchers: [MatcherEntity!]!
  runCount: Float!
  createdAt: Date!
  updatedAt: Date!
  deletedAt: Date
  webhookUrl: String
  webhookBody: String
  color: String!
  sendEmail: Boolean!
}

type EventLogEntity {
  id: ID!
  event: EventEntity!
  eventId: Float!
}

input EventsQuery {
  skip: Float
  take: Float
  userId: Float
  isPublic: Boolean
  searchTerms: String
}

type EventsQueryResponse {
  totalCount: Float!
  skip: Float
  take: Float
  events: [EventEntity!]!
}

input MatcherDto {
  id: ID
  eventId: Float
  abiEventInputId: Float
  order: Float
  source: String
  operator: Float
  operand: String = ""
}

type MatcherEntity {
  id: ID!
  event: EventEntity!
  eventId: Float!
  order: Float!
  source: String!
  abiEventInput: AbiEventInputEntity!
  abiEventInputId: Float
  operator: Float!
  operand: String!
  createdAt: Date!
  updatedAt: Date!
}

type MetaDataTypeEntity {
  metaDataType: ID!
  title: String!
}

type Mutation {
  createApp(app: AppDto!): AppEntity!
  updateApp(app: AppDto!): AppEntity!
  destroyApp(appId: Float!): AppEntity!
  disableEventEmail(disableEmailKey: String!): Float!
  createEvent(event: EventDto!): EventEntity!
  updateEvent(event: EventDto!): EventEntity!
  deleteEvent(eventId: Float!): EventEntity!
  createMatcher(matcher: MatcherDto!): MatcherEntity!
  updateMatcher(matcher: MatcherDto!): MatcherEntity!
  destroyMatcher(matcherId: Float!): Boolean!
  createAbi(abi: AbiDto!): AbiEntity!
  updateAbi(abi: AbiDto!): AbiEntity!
  destroyAbi(id: Float!): AbiEntity!
  updateAbiEventInput(abiEventInput: AbiEventInputDto!): AbiEventInputEntity!
  updateAbiEvent(abiEvent: AbiEventDto!): AbiEventEntity!
  createContract(contract: ContractDto!): ContractEntity!
  updateContract(contract: ContractDto!): ContractEntity!
  destroyContract(id: Float!): ContractEntity!
}

input PagedQuery {
  skip: Float
  take: Float
}

type PagedQueryResponse {
  totalCount: Float!
  skip: Float
  take: Float
}

type Query {
  jwt(password: String!, email: String!): String!
  Authorization(password: String!, email: String!): String!
  app(id: Float!): AppEntity
  apps: [AppEntity!]!
  event(id: Float!): EventEntity
  events(eventsQuery: EventsQuery): EventsQueryResponse!
  source(source: String!): SourceEntity!
  sources: [SourceEntity!]!
  metaDataType(metaDataType: String!): MetaDataTypeEntity!
  metaDataTypes: [MetaDataTypeEntity!]!
  abi(id: Float!): AbiEntity!
  abis(name: String): [AbiEntity!]!
  abiEventInputs(abiEventId: Float, name: String): [AbiEventInputEntity!]!
  abiEventInput(id: Float!): AbiEventInputEntity!
  abiEvent(id: Float!): AbiEventEntity!
  abiEvents(topic: String, name: String): [AbiEventEntity!]!
  contract(id: Float!): ContractEntity!
  contracts(contractsQuery: ContractsQuery): ContractsQueryResponse!
}

type SourceEntity {
  source: ID!
  title: String!
  dataType: String!
  metaDataType: Float
}

type UserEntity {
  id: ID!
  name: String!
  email: String!
  isAdmin: Boolean!
}

type WorkLogEntity {
  id: ID!
  chainId: Float!
  lastCompletedBlockNumber: Float!
}
